<%
  const { utils, route, config, dataFromApiTemplate } = it;
  const { query } = route.request;
  const { getConfigByRoute,paginationTargetKeywords } = dataFromApiTemplate;

  const { 
    conditions:{
      hasPagination,
      isQuery,
      isMutation,
      isOptialnalVariabels,
    },
    data: {
      rawWrapperArgs,
      wrapperArgs,
      queryKeyName,
      functionName,
      apiInstanceName,
      apiClassName,
      hookVariant,
      key,
      methodKey
    },
    utils: {
      upperSnakeCase,
      removeModuleName,
      argToTmpl,
    }
  } = getConfigByRoute(route);

  const { _, classNameCase } = utils;

  const conditionalParamsText = isOptialnalVariabels ? "params?" : "params"
  const conditionCallWithVariabels = isQuery ? `(${conditionalParamsText}.variables)` : "";
  const conditionParamQueryKey = isQuery ? `,${conditionalParamsText}.variables` : "";
  const conditionWrapFunc =  isQuery ? "() =>" : "";
  const conditionalQueryKeyParams =  isQuery ? `${conditionalParamsText}.variables` : "";

  const routeDocs = includeFile("@base/route-docs", { config, route, utils });
  const lowerhookVariant =  _.lowerCase(hookVariant)
  const hookKeyName = `${lowerhookVariant}Key`;
 %>

 /**
 <%~ routeDocs.description %>

 * <% /* Here you can add some other JSDoc tags */ %>

<%~ routeDocs.lines %>

 */
  export const use<%~ classNameCase(functionName) %><%~ hookVariant %> = (
  <%~ conditionalParamsText %>: <%~ hookVariant %>HookParams<typeof <%= apiInstanceName %>.<%~ functionName %>>,
) => {
  const <%~ hookKeyName %> =  <%~ queryKeyName %>.<%~ methodKey %>(<%~ conditionalQueryKeyParams %>);
  const result = use<%~ hookVariant %>(
    <%~ hookKeyName %>,
    <%~ conditionWrapFunc %> <%= apiInstanceName %>.<%~ functionName %><%~ conditionCallWithVariabels %>,
    params?.options,
  );

  return {...result ,  <%~ hookKeyName %>}
};

<% if (isQuery && hasPagination) { %>

 /**
 <%~ routeDocs.description %>

 * <% /* Here you can add some other JSDoc tags */ %>

<%~ routeDocs.lines %>

 */
export const use<%~ classNameCase(functionName) %>InfiniteQuery = (
  <%~ conditionalParamsText %>: InfiniteQueryHookParams<typeof <%= apiInstanceName %>.<%~ functionName %>>,
) => {
  const <%~ hookKeyName %> =  <%~ queryKeyName %>.<%~ methodKey %>_INFINITE(<%~ conditionalQueryKeyParams %>);

  const result = useInfiniteQuery(
    <%~ hookKeyName %>,
    ({ pageParam = 0 }) => {
      return <%= apiInstanceName %>.<%~ functionName %>({
        ...params?.variables,
        query: { ...params?.variables?.query, <%~ paginationTargetKeywords %>: pageParam, }
      });
    },
    {
      getNextPageParam: (lastPage) => {
        const params = lastPage.next
          ? new URL(lastPage.next).searchParams
          : null;
        const <%~ paginationTargetKeywords %> = params ? params.get('<%~ paginationTargetKeywords %>') : null;
        return <%~ paginationTargetKeywords %>;
      },
      ...params?.options,
    },
  );

  return {...result,  <%~ hookKeyName %>}
};

<% } %>