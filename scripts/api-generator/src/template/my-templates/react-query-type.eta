import { AxiosRequestConfig } from 'axios';
import { UseInfiniteQueryOptions, UseMutationOptions, UseQueryOptions } from 'react-query';


export type QueryHookParams<T extends (any?: any) => Promise<any>> = {
  options?: UseQueryOptions<UnboxPromise<ReturnType<T>>>;
} & OptionalVariables<Parameter<T>>;

export type InfiniteQueryHookParams<T extends (any?: any) => Promise<any>> = {
  options?: UseInfiniteQueryOptions<UnboxPromise<ReturnType<T>>>;
} & OptionalVariables<Parameter<T>>;

export type MutationHookParams<T extends (any?: any) => Promise<any>> = {
  options?: UseMutationOptions<UnboxPromise<ReturnType<T>>, unknown, undefined extends Parameter<T> ? void : Parameter<T>, unknown>;
};

export type OptionalVariables<T> = undefined extends T ? { variables?: T } : { variables: T };

export type UnboxPromise<T extends Promise<any>> = T extends Promise<infer U> ? U : never;

export type Parameter<T> = T extends (param: infer U) => any ? U : never;

